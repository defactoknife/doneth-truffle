
address founder;
string name;
uint256 totalShares;
bool incrementShares;
uint256 incrementInterval;


mapping(address => Member) members;
address[] public memberKeys;

struct Member {
  bool exists;
  bool active;
  bool admin;
  uint256 shares;
  uint256 withdrawn;
}

Contract (string n) {
  name = n;
  founder = msg.sender;
  addMember(msg.sender, 1, true);
}

Event Deposit();
Event Withdraw();
Event AddShare();
Event RemoveShare();

function () public payable {
 Deposit(msg.sender, msg.value);
}

modifier onlyAdmin () { if(msg.sender != founder && !members[msg.sender].admin) revert();}
modifier onlyExisting (address who) { if(!members[who].exists) revert();}

function addMember (address who, uint256 shares, bool admin) public adminOnly() {
  members[who].exists = true;
  members[who].admin = admin;
  members[who].active = true;
  addShare(who, amount);
}


function addShare (address who, uint256 amount) public adminOnly() onlyExisting(who) {
  totalShares.add(amount);
  members[who].shares.add(amount);
}

function removeShare (address who, uint256 amount) public adminOnly() onlyExisting(who) {
  totalShares.sub(amount);
  members[who].shares.sub(amount);
}

function withdraw (uint256 amount) public onlyExisting(msg.sender) {
  uint256 memory owed = amountOwed(msg.sender);
  if (amount > owed.sub(members[msg.sender].withdrawn)) revert();
  send(msg.sender, amount);
  members[msg.sender].withdrawn.add(amount);
  Withdraw(msg.sender, amount);
}

function amountOwed(address who) public onlyExisting(who){
  return  balance.div(totalShares).mul(members[who].shares);
}